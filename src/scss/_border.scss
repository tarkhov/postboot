// Responsive
@each $breakpoint in map-keys($grid-breakpoints) {
  @if $breakpoint != 'xs' {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint);

      .border#{$infix} { border: $border-width solid $border-color !important; }
      @each $position in $position-properties {
        .border#{$infix}-#{$position} { border-#{$position}: $border-width solid $border-color !important; }
      }
    }
  }
}

// Custom
@each $color, $value in $theme-colors {
  .border-#{$color} {
    --bs-border-opacity: 1;
    border-color: rgba(var(--bs-#{$color}-rgb), var(--bs-border-opacity)) !important;
  }
}
@each $color, $value in $custom-colors {
  .border-#{$color} {
    --bs-border-opacity: 1;
    border-color: rgba(var(--bs-#{$color}-rgb), var(--bs-border-opacity)) !important;
  }
}

// Opacity
@for $alpha from 1 through 9 {
  .border-opacity-#{($alpha * 10)} {
    --bs-border-opacity: #{($alpha * .1)};
  }
}

// Hover
@each $color, $value in $theme-colors {
  .border-hover-#{$color} {
    --bs-border-hover-opacity: 1;
    &:focus,
    &:hover {
      border-color: rgba(var(--bs-#{$color}-rgb), var(--bs-border-hover-opacity)) !important;
    }
  }
}
@each $color, $value in $custom-colors {
  .border-hover-#{$color} {
    --bs-border-hover-opacity: 1;
    &:focus,
    &:hover {
      border-color: rgba(var(--bs-#{$color}-rgb), var(--bs-border-hover-opacity)) !important;
    }
  }
}

// Hover opacity
@for $alpha from 1 through 9 {
  .border-hover-opacity-#{($alpha * 10)} {
    --bs-border-hover-opacity: #{($alpha * .1)};
  }
}

// Style
@each $style, $value in $border-styles {
  .border-#{$style} { border-style: $value !important; }

  @each $position in $position-properties {
    .border-#{$position}-#{$style} { border-#{$position}-style: $value !important; }
  }
}

// Width
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint);

    @if $breakpoint != 'xs' {
      .border#{$infix}-0 { border-width: 0 !important; }

      @each $position in $position-properties {
        .border-#{$position}#{$infix}-0 { border-#{$position}-width: 0 !important; }
      }
    }

    @each $width, $value in $border-widths {
      @if $breakpoint != 'xs' {
        .border#{$infix}-#{$width} { border-width: $value !important; }
      }

      @each $position in $position-properties {
        .border-#{$position}#{$infix}-#{$width} { border-#{$position}-width: $value !important; }
      }
    }
  }
}

// Rounded
.rounded-top-pill {
  border-top-left-radius: $border-radius-pill !important;
  border-top-right-radius: $border-radius-pill !important;
}
.rounded-end-pill {
  border-top-right-radius: $border-radius-pill !important;
  border-bottom-right-radius: $border-radius-pill !important;
}
.rounded-bottom-pill {
  border-bottom-right-radius: $border-radius-pill !important;
  border-bottom-left-radius: $border-radius-pill !important;
}
.rounded-start-pill {
  border-top-left-radius: $border-radius-pill !important;
  border-bottom-left-radius: $border-radius-pill !important;
}

.rounded-top-0 {
  border-top-left-radius: 0 !important;
  border-top-right-radius: 0 !important;
}
.rounded-end-0 {
  border-top-right-radius: 0 !important;
  border-bottom-right-radius: 0 !important;
}
.rounded-bottom-0 {
  border-bottom-right-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
}
.rounded-start-0 {
  border-top-left-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
}
